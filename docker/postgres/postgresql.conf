# ========================================
# PostgreSQL 16 Production Configuration
# ========================================
# Optimized for 2GB container with SSD storage
# Adjust values based on actual hardware resources
# ========================================

# ----------------------------------------
# CONNECTION SETTINGS
# ----------------------------------------
listen_addresses = '*'
max_connections = 100
superuser_reserved_connections = 3

# ----------------------------------------
# MEMORY SETTINGS
# ----------------------------------------
# shared_buffers: 25% of available RAM (2GB container = 512MB)
shared_buffers = 512MB

# effective_cache_size: 75% of available RAM (estimate of OS and DB cache)
effective_cache_size = 1536MB

# maintenance_work_mem: Memory for VACUUM, CREATE INDEX, etc.
maintenance_work_mem = 128MB

# work_mem: Memory per operation (sort, hash join)
# 16MB allows ~30 complex queries simultaneously (512MB/16MB = 32)
work_mem = 16MB

# ----------------------------------------
# WRITE-AHEAD LOG (WAL)
# ----------------------------------------
# wal_level: replica enables point-in-time recovery and replication
wal_level = replica

# WAL file size management
max_wal_size = 2GB
min_wal_size = 1GB

# Enable WAL compression to save disk space
wal_compression = on

# WAL archiving for backup and recovery
# Uses wrapper script for error handling, logging, and atomic operations
# The script ensures directory exists, logs errors, and retries on failures
archive_mode = on
archive_command = '/usr/local/bin/wal-archive.sh %p %f'
archive_timeout = 300

# ----------------------------------------
# CHECKPOINTS
# ----------------------------------------
# Spread checkpoints over this fraction of checkpoint interval
checkpoint_completion_target = 0.9

# How often to flush WAL (0 = managed by OS, safest = 'on')
synchronous_commit = on

# ----------------------------------------
# QUERY PLANNING
# ----------------------------------------
# Optimized for SSD storage
random_page_cost = 1.1

# Higher value = more concurrent I/O operations (good for SSD)
effective_io_concurrency = 200

# Statistics target for query planning
default_statistics_target = 100

# ----------------------------------------
# PERFORMANCE TUNING
# ----------------------------------------
# Enable parallel query execution
max_parallel_workers_per_gather = 2
max_parallel_workers = 4
max_worker_processes = 4

# ----------------------------------------
# AUTOVACUUM
# ----------------------------------------
autovacuum = on
autovacuum_max_workers = 3
autovacuum_naptime = 1min

# Be more aggressive with autovacuum in production
autovacuum_vacuum_threshold = 50
autovacuum_analyze_threshold = 50
autovacuum_vacuum_scale_factor = 0.1
autovacuum_analyze_scale_factor = 0.05

# ----------------------------------------
# LOGGING
# ----------------------------------------
# Enable logging collector
logging_collector = on

# Log destination and rotation
log_directory = 'pg_log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_rotation_age = 1d
log_rotation_size = 100MB
log_truncate_on_rotation = on

# What to log
log_min_duration_statement = 1000
log_checkpoints = on
log_connections = on
log_disconnections = on
log_duration = off
log_hostname = off
log_lock_waits = on
log_statement = 'ddl'
log_temp_files = 0

# Log line prefix (timestamp, PID, user, database, application, client IP)
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

# Error verbosity
log_error_verbosity = default

# ----------------------------------------
# SECURITY
# ----------------------------------------
# Password encryption method (scram-sha-256 is most secure)
password_encryption = scram-sha-256

# SSL configuration (controlled at container startup)
# The init script /docker-entrypoint-initdb.d/00-setup-ssl.sh sets SSL on/off based on
# the POSTGRES_USE_SSL environment variable. Defaults to off for local development.
# When enabled, cert and key are expected at:
#   - /etc/ssl/certs/server.crt
#   - /etc/ssl/private/server.key
# Note: These values may be overridden by the init script.
ssl = off
# ssl_cert_file = '/etc/ssl/certs/server.crt'
# ssl_key_file = '/etc/ssl/private/server.key'
# ssl_ca_file = '/etc/ssl/certs/ca.crt'

# ----------------------------------------
# LOCALE AND FORMATTING
# ----------------------------------------
datestyle = 'iso, mdy'
timezone = 'UTC'

# Use UTF-8 encoding
lc_messages = 'en_US.utf8'
lc_monetary = 'en_US.utf8'
lc_numeric = 'en_US.utf8'
lc_time = 'en_US.utf8'

# Default text search configuration
default_text_search_config = 'pg_catalog.english'

# ----------------------------------------
# SHARED PRELOAD LIBRARIES
# ----------------------------------------
# Load extensions at server start
shared_preload_libraries = 'pg_stat_statements'

# ----------------------------------------
# STATISTICS MONITORING
# ----------------------------------------
# pg_stat_statements for query performance monitoring
pg_stat_statements.max = 10000
pg_stat_statements.track = all

# Track I/O timing (overhead is minimal on modern systems)
track_io_timing = on
track_functions = all

# ----------------------------------------
# CLIENT CONNECTION DEFAULTS
# ----------------------------------------
# Statement timeout (120 seconds - prevents runaway queries while allowing longer operations)
statement_timeout = 120000

# Lock timeout (10 seconds)
lock_timeout = 10000

# Idle in transaction timeout (5 minutes)
idle_in_transaction_session_timeout = 300000

# ----------------------------------------
# NOTES FOR TUNING
# ----------------------------------------
# Adjust these values based on your workload:
#
# For READ-HEAVY workloads:
#   - Increase shared_buffers to 40% of RAM
#   - Increase effective_cache_size
#   - Decrease random_page_cost to 1.0 for SSD
#
# For WRITE-HEAVY workloads:
#   - Increase wal_buffers to 16MB
#   - Increase max_wal_size to 4GB
#   - Decrease checkpoint_completion_target to 0.7
#
# For MANY CONNECTIONS:
#   - Increase max_connections
#   - Decrease work_mem proportionally
#   - Consider using connection pooling (PgBouncer)
#
# Monitor with:
#   - SELECT * FROM pg_stat_database;
#   - SELECT * FROM pg_stat_statements ORDER BY total_time DESC;
#   - SELECT * FROM pg_stat_activity;
# ========================================
