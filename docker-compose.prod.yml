version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-kevinalthaus}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-kevinalthaus}']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    security_opt:
      - no-new-privileges:true

  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway/Dockerfile
    ports:
      - '4000:4000'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    restart: always
    environment:
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET is required for api-gateway}
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:4000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - /app/node_modules
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  main-app:
    build:
      context: .
      dockerfile: docker/main-app/Dockerfile
    ports:
      - '4001:3001'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    restart: always
    environment:
      NODE_ENV: production
      MAIN_APP_PORT: 3001
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET is required for main-app}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-kevinalthaus}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-kevinalthaus}
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3001/health || exit 1']
      interval: 20s
      timeout: 5s
      retries: 6
      start_period: 40s
    volumes:
      - /app/node_modules
      - ./uploads:/app/uploads
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - '3001:3000'
    networks:
      - app_network
    restart: always
    environment:
      NODE_ENV: production
    volumes:
      - /app/node_modules
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  admin:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
    ports:
      - '3000:3000'
    networks:
      - app_network
    restart: always
    environment:
      NODE_ENV: production
    volumes:
      - /app/node_modules
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
